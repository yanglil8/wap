{"version":3,"file":"js/7139.5d3da7a4.js","mappings":"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","sources":["webpack://wap/./src/universalPage/formAE/FormAE.vue","webpack://wap/src/universalPage/formAE/FormAE.vue","webpack://wap/./src/universalPage/formAE/FormAE.vue?4e1c","webpack://wap/./src/universalPage/formAE/FormAE.vue?5b0f"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('popup',{staticClass:\"main-page\"},[_c('form',{staticClass:\"h-form\"},[_vm._l((_vm.config),function(item,index){return _c('item',{directives:[{name:\"show\",rawName:\"v-show\",value:(item.Visibility.includes(1)),expression:\"item.Visibility.includes(1)\"}],key:index,attrs:{\"name\":item.FieldName,\"hiddenout\":item.FieldType==29,\"must\":!!item.IsRequried,\"width\":item.ItemWidth||'xl',\"pd\":item.FieldType==6||item.FieldType==15||item.FieldType==17||item.FieldType==13}},[_c('h-renderItem',{attrs:{\"render\":item.render,\"info\":_vm.info}})],1)}),_c('h-renderItem',{attrs:{\"render\":_vm.customRender,\"info\":_vm.info}})],2),_c('h-submitBtn',{ref:\"sub\",attrs:{\"slot\":\"btns\"},on:{\"submit\":_vm.submit},slot:\"btns\"}),_c('h-person',{ref:\"person\",on:{\"getPerson\":_vm.getPerson}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <popup class=\"main-page\">\r\n        <form class=\"h-form\">\r\n            <item v-for=\"(item,index) in config\" :key=\"index\" :name=\"item.FieldName\" :hiddenout=\"item.FieldType==29\" :must=\"!!item.IsRequried\" :width=\"item.ItemWidth||'xl'\" :pd=\"item.FieldType==6||item.FieldType==15||item.FieldType==17||item.FieldType==13\" v-show=\"item.Visibility.includes(1)\">\r\n                <h-renderItem :render=item.render :info=\"info\" />\r\n            </item>\r\n            <h-renderItem :render=customRender :info=\"info\" />\r\n        </form>\r\n        <h-submitBtn @submit=\"submit\" slot=\"btns\" ref=\"sub\" />\r\n        <h-person ref=\"person\" @getPerson=\"getPerson\" />\r\n    </popup>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"\r\nexport default {\r\n    name: \"FormAE\",\r\n    props: {\r\n        apis: {\r\n            edit: null,\r\n            create: null,\r\n            details: null\r\n        },\r\n        FormsCode: {\r\n            tyep: String\r\n        },\r\n        initAfterFun: {\r\n            type: Function,\r\n            default: null\r\n        },\r\n        loadAfterFun: {\r\n            type: Function,\r\n            default: null\r\n        },\r\n        submitBefore: {\r\n            type: Function,\r\n            default: null\r\n        },\r\n        // 是否需要在上传附件后创建表单\r\n        upLoadBeforSubmit: {\r\n            type: Boolean,\r\n            default: () => false\r\n        },\r\n        imgNameField: {\r\n            type: String,\r\n            default: \"CoverImg\"\r\n        },\r\n        customRender: {\r\n            type: Function,\r\n            default: () => { }\r\n        }\r\n    },\r\n    components: {},\r\n    data() {\r\n        return {\r\n            info: {\r\n                FStatus: 1,\r\n                EntryList: []\r\n            },\r\n            rules: {},\r\n            config: [],\r\n            personNameField: null,\r\n            personIdField: null\r\n        }\r\n    },\r\n    methods: {\r\n        async start(row) {\r\n            this.init()\r\n            this.initAfterFun && this.initAfterFun(row, this.info, this)\r\n            this.$refs.popup.startLoading()\r\n            this.$refs.popup.start(row ? \"编辑\" : \"新增\")\r\n            if (!row) this.info.isAdd = true\r\n            if (this.FormsCode) await this.showItems()\r\n            if (row) {\r\n                this.getDetails(row.Id)\r\n                this.fileQueryList(row.Id)\r\n                this.$emit(\"beforeEdit\")\r\n            } else {\r\n                if (this.upLoadBeforSubmit) this.info.Id = this.$guid.raw()\r\n                this.$refs.popup.closeLoading()\r\n            }\r\n        },\r\n        getDetails(Id) {\r\n            this.apis.details({ Id }).then(res => {\r\n                if (res) {\r\n                    this.info = res.data\r\n                    if (this.loadAfterFun) this.loadAfterFun(this.info, this)\r\n                    if (this.personNameField && this.personIdField) this.$refs.person.back([{ PersonName: res[this.personNameField], Id: res[this.personIdField] }])\r\n                }\r\n            })\r\n        },\r\n        async submit() {\r\n            await this.$u.checkForm(this.info, this.rules)\r\n            this.submitBefore && this.submitBefore(this.info, this)\r\n            this.$refs.sub.loading()\r\n            if (this.upLoadBeforSubmit) {\r\n                await this.upLoadFile(this.info.Id)\r\n            }\r\n            let apiFun = this.info.isAdd ? this.apis.create : this.apis.edit\r\n            apiFun(this.info).then(res => {\r\n                if (res) {\r\n                    this.$refs.popup.close()\r\n                    this.$emit(\"refresh\")\r\n                    this.$u.msg(this.info.Id ? \"编辑成功！\" : \"创建成功！\")\r\n                    if (!this.upLoadBeforSubmit) this.upLoadFile(this.info.Id || res.data)\r\n                }\r\n                this.$refs.sub.cancelLoading()\r\n            })\r\n        },\r\n        upLoadFile(SourceId) {\r\n            if (this.$refs.upLoad?.reUp) {\r\n                let promiseAll = []\r\n                for (let item of this.$refs.upLoad.fileList) {\r\n                    if (!item.Id) {\r\n                        promiseAll.push(this._api.upLoad({ file: item, Classify: 2, SourceId: SourceId }))\r\n                    }\r\n                }\r\n                return axios.all(promiseAll).then(res => {\r\n                    if (res && this.upLoadBeforSubmit) {\r\n                        this.info[this.imgNameField] = res[0].data\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        fileQueryList(SourceId) {\r\n            if (this.$refs.upLoad) this._api.fileQueryList({ SourceId }).then(res => {\r\n                if (res) {\r\n                    this.$refs.upLoad.fileList = res.data\r\n                }\r\n            })\r\n        },\r\n        /*\r\n            1:普通文本\r\n            2:数值\r\n            3:日期\r\n            5:固定值下拉\r\n            6:单选\r\n            7:基础资料\r\n            9:基础资料多选\r\n            11:基础资料树形单选\r\n            13:富文本\r\n        */\r\n        async showItems() {\r\n            let form = await this._api.BOS_FormsDetail({ FormCode: this.FormsCode })\r\n            let formList = form.data.FieldsList.sort((a, b) => a.RowId - b.RowId)\r\n\r\n            if (!form || !formList.length) return this.$refs.popup.closeLoading()\r\n            for (let it of formList) {\r\n\r\n                // rules\r\n                if (!!it.IsRequried) {\r\n                    this.rules[it.FieldId] = it.Placeholder\r\n                }\r\n\r\n                if (it.Options && it.Options.includes(\"{\")) it.Options = JSON.parse(it.Options)\r\n                if (it.JsonString) { it.JsonString = JSON.parse(it.JsonString) } else {\r\n                    it.JsonString = {\r\n                        RelationshipField: 0,\r\n                        RelationshipFields: []\r\n                    }\r\n                }\r\n\r\n                it.Visibility = it.Visibility ? JSON.parse(it.Visibility) : []\r\n\r\n                if (!it.ApiUrl) {\r\n                    it.render = this.getRender(it)\r\n                } else {\r\n                    it.render = (h, info) => {\r\n                        return (\r\n                            <el-input v-model={info[it.FieldId]} placeholder={it.Placeholder} />\r\n                        )\r\n                    }\r\n\r\n                    let result = await this._api.customApi(it.ApiUrl)\r\n                    if (result) {\r\n                        it.render = (h, info) => {\r\n                            if (it.FieldType == 7) {\r\n                                return (\r\n                                    <el-select v-model={info[it.FieldId]} placeholder={it.Placeholder} style=\"width:100%\">\r\n                                        {result.data.map(item => {\r\n                                            return <el-option label={item[it.Options.label]} value={item[it.Options.value]}></el-option>\r\n                                        })}\r\n                                    </el-select>\r\n                                )\r\n                            } else if (it.FieldType == 9) {\r\n                                return (\r\n                                    <treeInputMultiple dataList={result.data} fieldName={it.Options.label} placeholder={it.Placeholder} v-model={info[it.FieldId]} />\r\n                                )\r\n                            } else if (it.FieldType == 11) {\r\n                                // if (it.JsonString.RelationshipFields.length) {\r\n                                //     let flag = true\r\n                                //     for (let item of it.JsonString.RelationshipFields) {\r\n                                //         flag = true && (info[item.FieldId] == item.FieldValue)\r\n                                //     }\r\n                                // }\r\n\r\n                                let data = this.$u.arraytoTree(result.data)\r\n                                return (\r\n                                    <h-selectTree data={data} label={it.Options.label} ref={it.Ref} v-model={info[it.FieldId]} placeholder={it.Placeholder} inputWidth={\"100%\"} />\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.config = form.data.FieldsList\r\n            this.$refs.popup.closeLoading()\r\n        },\r\n\r\n        getRender({ FieldType, FieldId, Placeholder, Options, Unit, MaxValue, MinValue, DefaultValue }) {\r\n            return (h, info) => {\r\n                let ele = <span></span>\r\n                switch (FieldType) {\r\n                    case 1:\r\n                        ele = <el-input v-model={info[FieldId]} placeholder={Placeholder} clearable ></el-input>\r\n                        break\r\n                    case 2:\r\n                        ele = <el-input type=\"number\" v-model={info[FieldId]} placeholder={Placeholder} maxlength={MaxValue} minlength={MinValue}  >\r\n                            <span slot=\"suffix\">{Unit}</span>\r\n                        </el-input>\r\n                        break\r\n                    case 23:\r\n                        ele = <el-input v-model={info[FieldId]} placeholder={Placeholder} type=\"textarea\" ></el-input>\r\n                        break\r\n                    case 3:\r\n                        if (DefaultValue) info[FieldId] = new Date()\r\n                        ele = <el-date-picker type=\"date\" value-format=\"yyyy-MM-dd\" format=\"yyyy-MM-dd\" v-model={info[FieldId]} placeholder={Placeholder} clearable />\r\n                        break\r\n                    case 4:\r\n                        if (DefaultValue) info[FieldId] = new Date()\r\n                        ele = <el-date-picker type=\"datetime\" value-format=\"yyyy-MM-dd HH:mm\" format=\"yyyy-MM-dd HH:mm\" v-model={info[FieldId]} placeholder={Placeholder} clearable />\r\n                        break\r\n                    case 5:\r\n                        ele = <el-select v-model={info[FieldId]} placeholder={Placeholder} style=\"width:100%\">\r\n                            {Options.map(it => {\r\n                                return <el-option label={it.label} value={it.value}></el-option>\r\n                            })}\r\n                        </el-select>\r\n                        break\r\n                    case 15:\r\n                        ele = <h-upload limitCount=\"10\" ref=\"upLoad\" />\r\n                        break\r\n                    case 17:\r\n                        ele = <h-upload limitCount={MaxValue} ref=\"upLoad\" type=\"img\" />\r\n                        break\r\n                    case 13:\r\n                        ele = <el-radio-group v-model={info[FieldId]} placeholder={Placeholder} style=\"width:100%\">\r\n                            {Options.map(it => {\r\n                                return <el-radio label={it.value} >{it.label}</el-radio>\r\n                            })}\r\n                        </el-radio-group>\r\n                        break\r\n                    case 29:\r\n                        let ueditor = {\r\n                            serverUrl: \"/FMS/api/UEditor\",\r\n                            initialFrameHeight: 400,\r\n                            UEDITOR_HOME_URL: `/UEditor/`\r\n                        }\r\n                        ele = <vue-ueditor-wrap config={ueditor} v-model={info[FieldId]}></vue-ueditor-wrap>\r\n                        break\r\n                    case 19:\r\n                        // 选择人员默认是当前人\r\n                        // if (info.isAdd) {\r\n                        //     this.info[Options] = this.webMyInfo.Fname\r\n                        //     this.info[FieldId] = this.webMyInfo.PersonId\r\n                        // }\r\n                        ele = <el-input v-model={info[Options]} placeholder={Placeholder} readonly nativeOnclick={e => this.choosePerson(MaxValue, FieldId, Options)} />\r\n                        break\r\n                }\r\n                return (\r\n                    ele\r\n                )\r\n            }\r\n        },\r\n        choosePerson(MaxValue, FieldId, Options) {\r\n            this.personNameField = Options\r\n            this.personIdField = FieldId\r\n            this.$refs.person.start(MaxValue > 1 ? false : true)\r\n        },\r\n\r\n        async getPerson(list) {\r\n            this.info[this.personIdField] = list[0].PersonId\r\n            this.$set(this.info, this.personNameField, list[0].Fname)\r\n        }\r\n    },\r\n    mounted() { }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FormAE.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FormAE.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FormAE.vue?vue&type=template&id=37fef9fc&scoped=true&\"\nimport script from \"./FormAE.vue?vue&type=script&lang=js&\"\nexport * from \"./FormAE.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"37fef9fc\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_l","config","item","index","directives","name","rawName","value","Visibility","includes","expression","key","attrs","FieldName","FieldType","IsRequried","ItemWidth","info","customRender","ref","on","submit","slot","getPerson","staticRenderFns","props","apis","edit","create","details","FormsCode","tyep","initAfterFun","type","default","loadAfterFun","submitBefore","upLoadBeforSubmit","imgNameField","components","data","FStatus","EntryList","rules","personNameField","personIdField","methods","getDetails","Id","PersonName","apiFun","upLoadFile","promiseAll","file","Classify","SourceId","fileQueryList","FormCode","it","RelationshipField","RelationshipFields","result","getRender","FieldId","Placeholder","Options","Unit","MaxValue","MinValue","DefaultValue","ele","serverUrl","initialFrameHeight","UEDITOR_HOME_URL","choosePerson","mounted","component"],"sourceRoot":""}